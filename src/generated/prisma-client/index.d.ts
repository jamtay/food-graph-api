// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  foodItem: (where?: FoodItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  foodItem: (where: FoodItemWhereUniqueInput) => FoodItemNullablePromise;
  foodItems: (args?: {
    where?: FoodItemWhereInput;
    orderBy?: FoodItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FoodItem>;
  foodItemsConnection: (args?: {
    where?: FoodItemWhereInput;
    orderBy?: FoodItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FoodItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFoodItem: (data: FoodItemCreateInput) => FoodItemPromise;
  updateFoodItem: (args: {
    data: FoodItemUpdateInput;
    where: FoodItemWhereUniqueInput;
  }) => FoodItemPromise;
  updateManyFoodItems: (args: {
    data: FoodItemUpdateManyMutationInput;
    where?: FoodItemWhereInput;
  }) => BatchPayloadPromise;
  upsertFoodItem: (args: {
    where: FoodItemWhereUniqueInput;
    create: FoodItemCreateInput;
    update: FoodItemUpdateInput;
  }) => FoodItemPromise;
  deleteFoodItem: (where: FoodItemWhereUniqueInput) => FoodItemPromise;
  deleteManyFoodItems: (where?: FoodItemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  foodItem: (
    where?: FoodItemSubscriptionWhereInput
  ) => FoodItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FoodItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "calories_ASC"
  | "calories_DESC"
  | "protein_ASC"
  | "protein_DESC"
  | "vegan_ASC"
  | "vegan_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface FoodItemUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  cost?: Maybe<Float>;
  calories?: Maybe<Int>;
  protein?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutFoodsInput>;
}

export type FoodItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FoodItemUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FoodItemWhereUniqueInput;
  data: FoodItemUpdateWithoutCreatedByDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  foods?: Maybe<FoodItemCreateManyWithoutCreatedByInput>;
}

export interface FoodItemUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    FoodItemCreateWithoutCreatedByInput[] | FoodItemCreateWithoutCreatedByInput
  >;
  delete?: Maybe<FoodItemWhereUniqueInput[] | FoodItemWhereUniqueInput>;
  connect?: Maybe<FoodItemWhereUniqueInput[] | FoodItemWhereUniqueInput>;
  set?: Maybe<FoodItemWhereUniqueInput[] | FoodItemWhereUniqueInput>;
  disconnect?: Maybe<FoodItemWhereUniqueInput[] | FoodItemWhereUniqueInput>;
  update?: Maybe<
    | FoodItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    | FoodItemUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | FoodItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    | FoodItemUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<FoodItemScalarWhereInput[] | FoodItemScalarWhereInput>;
  updateMany?: Maybe<
    | FoodItemUpdateManyWithWhereNestedInput[]
    | FoodItemUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutFoodsInput {
  update: UserUpdateWithoutFoodsDataInput;
  create: UserCreateWithoutFoodsInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  foods?: Maybe<FoodItemUpdateManyWithoutCreatedByInput>;
}

export interface FoodItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FoodItemWhereInput>;
  AND?: Maybe<
    FoodItemSubscriptionWhereInput[] | FoodItemSubscriptionWhereInput
  >;
  OR?: Maybe<FoodItemSubscriptionWhereInput[] | FoodItemSubscriptionWhereInput>;
  NOT?: Maybe<
    FoodItemSubscriptionWhereInput[] | FoodItemSubscriptionWhereInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  foods_every?: Maybe<FoodItemWhereInput>;
  foods_some?: Maybe<FoodItemWhereInput>;
  foods_none?: Maybe<FoodItemWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FoodItemUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  cost?: Maybe<Float>;
  calories?: Maybe<Int>;
  protein?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
}

export interface FoodItemCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  cost?: Maybe<Float>;
  calories?: Maybe<Int>;
  protein?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutFoodsInput;
}

export interface FoodItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  cost?: Maybe<Float>;
  cost_not?: Maybe<Float>;
  cost_in?: Maybe<Float[] | Float>;
  cost_not_in?: Maybe<Float[] | Float>;
  cost_lt?: Maybe<Float>;
  cost_lte?: Maybe<Float>;
  cost_gt?: Maybe<Float>;
  cost_gte?: Maybe<Float>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
  vegan_not?: Maybe<Boolean>;
  AND?: Maybe<FoodItemScalarWhereInput[] | FoodItemScalarWhereInput>;
  OR?: Maybe<FoodItemScalarWhereInput[] | FoodItemScalarWhereInput>;
  NOT?: Maybe<FoodItemScalarWhereInput[] | FoodItemScalarWhereInput>;
}

export interface UserCreateOneWithoutFoodsInput {
  create?: Maybe<UserCreateWithoutFoodsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserCreateWithoutFoodsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface FoodItemCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  cost?: Maybe<Float>;
  calories?: Maybe<Int>;
  protein?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface FoodItemUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  cost?: Maybe<Float>;
  calories?: Maybe<Int>;
  protein?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
}

export interface FoodItemCreateManyWithoutCreatedByInput {
  create?: Maybe<
    FoodItemCreateWithoutCreatedByInput[] | FoodItemCreateWithoutCreatedByInput
  >;
  connect?: Maybe<FoodItemWhereUniqueInput[] | FoodItemWhereUniqueInput>;
}

export interface UserUpdateWithoutFoodsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutFoodsInput {
  create?: Maybe<UserCreateWithoutFoodsInput>;
  update?: Maybe<UserUpdateWithoutFoodsDataInput>;
  upsert?: Maybe<UserUpsertWithoutFoodsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FoodItemUpdateManyWithWhereNestedInput {
  where: FoodItemScalarWhereInput;
  data: FoodItemUpdateManyDataInput;
}

export interface FoodItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  cost?: Maybe<Float>;
  cost_not?: Maybe<Float>;
  cost_in?: Maybe<Float[] | Float>;
  cost_not_in?: Maybe<Float[] | Float>;
  cost_lt?: Maybe<Float>;
  cost_lte?: Maybe<Float>;
  cost_gt?: Maybe<Float>;
  cost_gte?: Maybe<Float>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
  vegan_not?: Maybe<Boolean>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<FoodItemWhereInput[] | FoodItemWhereInput>;
  OR?: Maybe<FoodItemWhereInput[] | FoodItemWhereInput>;
  NOT?: Maybe<FoodItemWhereInput[] | FoodItemWhereInput>;
}

export interface FoodItemUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  cost?: Maybe<Float>;
  calories?: Maybe<Int>;
  protein?: Maybe<Int>;
  vegan?: Maybe<Boolean>;
}

export interface FoodItemUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FoodItemWhereUniqueInput;
  update: FoodItemUpdateWithoutCreatedByDataInput;
  create: FoodItemCreateWithoutCreatedByInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface FoodItemSubscriptionPayload {
  mutation: MutationType;
  node: FoodItem;
  updatedFields: String[];
  previousValues: FoodItemPreviousValues;
}

export interface FoodItemSubscriptionPayloadPromise
  extends Promise<FoodItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FoodItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FoodItemPreviousValuesPromise>() => T;
}

export interface FoodItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FoodItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FoodItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FoodItemPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  foods: <T = FragmentableArray<FoodItem>>(args?: {
    where?: FoodItemWhereInput;
    orderBy?: FoodItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  foods: <T = Promise<AsyncIterator<FoodItemSubscription>>>(args?: {
    where?: FoodItemWhereInput;
    orderBy?: FoodItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  foods: <T = FragmentableArray<FoodItem>>(args?: {
    where?: FoodItemWhereInput;
    orderBy?: FoodItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateFoodItem {
  count: Int;
}

export interface AggregateFoodItemPromise
  extends Promise<AggregateFoodItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFoodItemSubscription
  extends Promise<AsyncIterator<AggregateFoodItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FoodItemPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  cost?: Float;
  calories?: Int;
  protein?: Int;
  vegan?: Boolean;
}

export interface FoodItemPreviousValuesPromise
  extends Promise<FoodItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  cost: () => Promise<Float>;
  calories: () => Promise<Int>;
  protein: () => Promise<Int>;
  vegan: () => Promise<Boolean>;
}

export interface FoodItemPreviousValuesSubscription
  extends Promise<AsyncIterator<FoodItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Float>>;
  calories: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  vegan: () => Promise<AsyncIterator<Boolean>>;
}

export interface FoodItem {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  cost?: Float;
  calories?: Int;
  protein?: Int;
  vegan?: Boolean;
}

export interface FoodItemPromise extends Promise<FoodItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  cost: () => Promise<Float>;
  calories: () => Promise<Int>;
  protein: () => Promise<Int>;
  vegan: () => Promise<Boolean>;
  createdBy: <T = UserPromise>() => T;
}

export interface FoodItemSubscription
  extends Promise<AsyncIterator<FoodItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Float>>;
  calories: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  vegan: () => Promise<AsyncIterator<Boolean>>;
  createdBy: <T = UserSubscription>() => T;
}

export interface FoodItemNullablePromise
  extends Promise<FoodItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  cost: () => Promise<Float>;
  calories: () => Promise<Int>;
  protein: () => Promise<Int>;
  vegan: () => Promise<Boolean>;
  createdBy: <T = UserPromise>() => T;
}

export interface FoodItemConnection {
  pageInfo: PageInfo;
  edges: FoodItemEdge[];
}

export interface FoodItemConnectionPromise
  extends Promise<FoodItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FoodItemEdge>>() => T;
  aggregate: <T = AggregateFoodItemPromise>() => T;
}

export interface FoodItemConnectionSubscription
  extends Promise<AsyncIterator<FoodItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FoodItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFoodItemSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FoodItemEdge {
  node: FoodItem;
  cursor: String;
}

export interface FoodItemEdgePromise
  extends Promise<FoodItemEdge>,
    Fragmentable {
  node: <T = FoodItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FoodItemEdgeSubscription
  extends Promise<AsyncIterator<FoodItemEdge>>,
    Fragmentable {
  node: <T = FoodItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "FoodItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
