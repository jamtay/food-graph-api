type Query {
  me: User
  allFoods: [FoodItem!]!
  food(id: ID!): FoodItem
  myFoods: [FoodItem!]!
  allMeals: [Meal!]!
  meal(id: ID!): Meal
  myMeals: [Meal!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createFoodItem(name: String!, description: String, cost: Float, calories: Int, protein: Int, vegan: Boolean): FoodItem!
  createMeal(name: String!, description: String, cost: Float, calories: Int, protein: Int, vegan: Boolean, location: String): Meal!
  deleteFoodItem(id: ID!): FoodItem
}

type Subscription {
  foodSubscription: FoodItem
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  foods: [FoodItem!]!
  meals: [Meal!]!
}

type FoodItem {
  id: ID!
  name: String!
  description: String
  cost: Float
  calories: Int
  protein: Int
  vegan: Boolean
  createdBy: User!
  mealsPartOf: [Meal!]!
  createdByLoggedInUser: Boolean
}

type Meal {
  id: ID!
  name: String!
  description: String
  cost: Float
  calories: Int
  protein: Int
  vegan: Boolean
  location: String
  createdBy: User!
  foods: [FoodItem!]!
}